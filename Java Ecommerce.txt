// Enhanced ECommerceApp.java with background colors, product images, and registration page
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.geometry.*;
import javafx.collections.*;
import javafx.beans.property.*;

public class ECommerceApp extends Application {
    private Stage primaryStage;
    private ObservableList<Product> products = FXCollections.observableArrayList();
    private ObservableList<CartItem> cartItems = FXCollections.observableArrayList();
    private String currentUser = null;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;
        primaryStage.setTitle("E-Commerce Application");
        initProducts();
        primaryStage.setScene(getLoginScene());
        primaryStage.show();
    }

    private Scene getLoginScene() {
        Label userLabel = new Label("Username:");
        TextField userField = new TextField();
        Label passLabel = new Label("Password:");
        PasswordField passField = new PasswordField();
        Button loginButton = new Button("Login");
        Label messageLabel = new Label();

        GridPane grid = new GridPane();
        grid.setAlignment(Pos.CENTER);
        grid.setVgap(10);
        grid.setHgap(10);
        grid.setStyle("-fx-background-color: #f0f8ff;");
        grid.add(userLabel, 0, 0);
        grid.add(userField, 1, 0);
        grid.add(passLabel, 0, 1);
        grid.add(passField, 1, 1);
        grid.add(loginButton, 1, 2);
        grid.add(messageLabel, 1, 3);

        loginButton.setOnAction(e -> {
            String username = userField.getText();
            String password = passField.getText();
            if(authenticate(username, password)) {
                currentUser = username; 
                primaryStage.setScene(getProductCatalogScene());
            } else {
                messageLabel.setText("Invalid credentials. Try 'user' / 'pass'.");
            }
        });

        Button registerButton = new Button("Register");
        grid.add(registerButton, 1, 4);
        registerButton.setOnAction(e -> {
            primaryStage.setScene(getRegisterScene());
        });

        return new Scene(grid, 400, 300);
    }

    private Scene getRegisterScene() {
        VBox layout = new VBox(10);
        layout.setAlignment(Pos.CENTER);
        layout.setStyle("-fx-background-color: #e0ffe0;");
        Label title = new Label("User Registration");
        TextField userField = new TextField();
        userField.setPromptText("Username");
        PasswordField passField = new PasswordField();
        passField.setPromptText("Password");
        Button register = new Button("Register");
        Label status = new Label();

        register.setOnAction(e -> {
            status.setText("Registration successful. Please login.");
            primaryStage.setScene(getLoginScene());
        });

        layout.getChildren().addAll(title, userField, passField, register, status);
        return new Scene(layout, 400, 300);
    }

    private Scene getProductCatalogScene() {
        Label title = new Label("Product Catalog");

        TableView<Product> productTable = new TableView<>();
        productTable.setItems(products);
        TableColumn<Product, String> nameCol = new TableColumn<>("Name");
        nameCol.setCellValueFactory(data -> data.getValue().nameProperty());
        TableColumn<Product, Number> priceCol = new TableColumn<>("Price");
        priceCol.setCellValueFactory(data -> data.getValue().priceProperty());
        productTable.getColumns().addAll(nameCol, priceCol);

        TextField filterField = new TextField();
        filterField.setPromptText("Search...");
        filterField.textProperty().addListener((obs, oldVal, newVal) -> {
            productTable.setItems(products.filtered(p -> 
                p.getName().toLowerCase().contains(newVal.toLowerCase())
            ));
        });

        Button viewDetailsButton = new Button("View Details");
        viewDetailsButton.setOnAction(e -> {
            Product selected = productTable.getSelectionModel().getSelectedItem();
            if(selected != null) {
                primaryStage.setScene(getProductDetailsScene(selected));
            }
        });

        Button viewCartButton = new Button("View Cart");
        viewCartButton.setOnAction(e -> primaryStage.setScene(getCartScene()));

        VBox layout = new VBox(10, title, filterField, productTable, viewDetailsButton, viewCartButton);
        layout.setPadding(new Insets(10));
        layout.setStyle("-fx-background-color: #fff8dc;");
        return new Scene(layout, 600, 400);
    }

    private Scene getProductDetailsScene(Product product) {
        Label nameLabel = new Label("Name: " + product.getName());
        Label descLabel = new Label("Description: " + product.getDescription());
        Label priceLabel = new Label("Price: $" + product.getPrice());

        ImageView imageView = new ImageView(new Image(product.getImagePath()));
        imageView.setFitWidth(150);
        imageView.setPreserveRatio(true);

        Button addToCartButton = new Button("Add to Cart");
        addToCartButton.setOnAction(e -> {
            addToCart(product, 1);
            primaryStage.setScene(getProductCatalogScene());
        });

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> primaryStage.setScene(getProductCatalogScene()));

        VBox layout = new VBox(10, imageView, nameLabel, descLabel, priceLabel, addToCartButton, backButton);
        layout.setPadding(new Insets(10));
        layout.setStyle("-fx-background-color: #f5f5f5;");
        return new Scene(layout, 400, 400);
    }

    private Scene getCartScene() {
        Label title = new Label("Your Cart");
        TableView<CartItem> cartTable = new TableView<>();
        cartTable.setItems(cartItems);
        TableColumn<CartItem, String> nameCol = new TableColumn<>("Name");
        nameCol.setCellValueFactory(data -> data.getValue().getProduct().nameProperty());
        TableColumn<CartItem, Number> qtyCol = new TableColumn<>("Quantity");
        qtyCol.setCellValueFactory(data -> data.getValue().quantityProperty());
        TableColumn<CartItem, Number> priceCol = new TableColumn<>("Price");
        priceCol.setCellValueFactory(data -> data.getValue().getProduct().priceProperty());
        cartTable.getColumns().addAll(nameCol, qtyCol, priceCol);

        Label totalLabel = new Label("Total: $" + calculateTotal());
        Button removeButton = new Button("Remove Selected");
        removeButton.setOnAction(e -> {
            CartItem selected = cartTable.getSelectionModel().getSelectedItem();
            if(selected != null) {
                cartItems.remove(selected);
                totalLabel.setText("Total: $" + calculateTotal());
            }
        });

        Button checkoutButton = new Button("Checkout");
        checkoutButton.setOnAction(e -> primaryStage.setScene(getCheckoutScene()));

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> primaryStage.setScene(getProductCatalogScene()));

        VBox layout = new VBox(10, title, cartTable, totalLabel, removeButton, checkoutButton, backButton);
        layout.setPadding(new Insets(10));
        layout.setStyle("-fx-background-color: #e6f7ff;");
        return new Scene(layout, 600, 400);
    }

    private Scene getCheckoutScene() {
        Label title = new Label("Checkout");
        Label amountLabel = new Label("Total Amount: $" + calculateTotal());

        ToggleGroup paymentGroup = new ToggleGroup();
        RadioButton cardOption = new RadioButton("Credit/Debit Card");
        cardOption.setToggleGroup(paymentGroup);
        RadioButton paypalOption = new RadioButton("PayPal");
        paypalOption.setToggleGroup(paymentGroup);
        RadioButton walletOption = new RadioButton("Digital Wallet");
        walletOption.setToggleGroup(paymentGroup);

        Button payButton = new Button("Pay Now");
        Label messageLabel = new Label();
        payButton.setOnAction(e -> {
            RadioButton selected = (RadioButton) paymentGroup.getSelectedToggle();
            if(selected != null) {
                messageLabel.setText("Payment Successful using " + selected.getText() + "!");
                cartItems.clear();
            } else {
                messageLabel.setText("Please select a payment method.");
            }
        });

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> primaryStage.setScene(getCartScene()));

        VBox layout = new VBox(10, title, amountLabel, cardOption, paypalOption, walletOption, payButton, messageLabel, backButton);
        layout.setPadding(new Insets(10));
        layout.setStyle("-fx-background-color: #fff0f5;");
        return new Scene(layout, 400, 400);
    }

    private boolean authenticate(String username, String password) {
        return username.equals("user") && password.equals("pass");
    }

    private void initProducts() {
        products.add(new Product("Laptop", "A high performance laptop", 999.99, "file:images/laptop.png"));
        products.add(new Product("Smartphone", "Latest Android smartphone", 499.99, "file:images/smartphone.png"));
        products.add(new Product("Headphones", "Noise-cancelling headphones", 199.99, "file:images/headphones.png"));
    }

    private void addToCart(Product product, int qty) {
        for (CartItem item : cartItems) {
            if(item.getProduct().equals(product)) {
                item.setQuantity(item.getQuantity() + qty);
                return;
            }
        }
        cartItems.add(new CartItem(product, qty));
    }

    private double calculateTotal() {
        double total = 0;
        for (CartItem item : cartItems) {
            total += item.getProduct().getPrice() * item.getQuantity();
        }
        return total;
    }
}

class Product {
    private final StringProperty name;
    private final StringProperty description;
    private final DoubleProperty price;
    private final StringProperty imagePath;

    public Product(String name, String description, double price, String imagePath) {
        this.name = new SimpleStringProperty(name);
        this.description = new SimpleStringProperty(description);
        this.price = new SimpleDoubleProperty(price);
        this.imagePath = new SimpleStringProperty(imagePath);
    }

    public String getName() { return name.get(); }
    public StringProperty nameProperty() { return name; }

    public String getDescription() { return description.get(); }
    public StringProperty descriptionProperty() { return description; }

    public double getPrice() { return price.get(); }
    public DoubleProperty priceProperty() { return price; }

    public String getImagePath() { return imagePath.get(); }
    public StringProperty imagePathProperty() { return imagePath; }
}

class CartItem {
    private final Product product;
    private final IntegerProperty quantity;

    public CartItem(Product product, int qty) {
        this.product = product;
        this.quantity = new SimpleIntegerProperty(qty);
    }

    public Product getProduct() {
        return product;
    }

    public int getQuantity() {
        return quantity.get();
    }

    public void setQuantity(int qty) {
        quantity.set(qty);
    }

    public IntegerProperty quantityProperty() {
        return quantity;
    }
}
